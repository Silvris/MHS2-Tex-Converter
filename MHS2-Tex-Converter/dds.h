
#pragma once

#include <inttypes.h>
#include <filesystem>

#define DDSRESULT int
#define DDSBOOL int

#define DDS_FMT_UNKNOWN  0
#define DDS_FMT_B8G8R8A8 7
#define DDS_FMT_R8G8B8A8 9
#define DDS_FMT_BC1_LIN  19
#define DDS_FMT_BC1_SRGB 20
#define DDS_FMT_BC2_LIN  21
#define DDS_FMT_BC2_SRGB 22
#define DDS_FMT_BC3_LIN  23
#define DDS_FMT_BC3_SRGB 24
#define DDS_FMT_BC4      25
#define DDS_FMT_BC5      31
#define DDS_FMT_BC7_LIN  55
#define DDS_FMT_BC7_SRGB 56

#define DDS_CUBEMAP     0x00000001
#define DDS_VOLUME      0x00000002
#define DDS_CUBEMAP_PX  0x00000100
#define DDS_CUBEMAP_NX  0x00000200
#define DDS_CUBEMAP_PY  0x00000400
#define DDS_CUBEMAP_NY  0x00000800
#define DDS_CUBEMAP_PZ  0x00001000
#define DDS_CUBEMAP_NZ  0x00002000
#define DDS_CUBEMAP_FULL (DDS_CUBEMAP|DDS_CUBEMAP_PX|DDS_CUBEMAP_NX|DDS_CUBEMAP_PY|DDS_CUBEMAP_NY|DDS_CUBEMAP_PZ|DDS_CUBEMAP_NZ)
#define DDS_FILE_READER 0x10000000

#define DDS_SUCCESS 0
#define DDS_ENOTFND -1
#define DDS_EINVAL  -2
#define DDS_ENOTSUP -3


typedef unsigned char dds_byte;
typedef uint32_t dds_u32;

typedef enum DXGI_FORMAT
{
	DXGI_FORMAT_UNKNOWN = 0,
	DXGI_FORMAT_R32G32B32A32_TYPELESS = 1,
	DXGI_FORMAT_R32G32B32A32_FLOAT = 2,
	DXGI_FORMAT_R32G32B32A32_UINT = 3,
	DXGI_FORMAT_R32G32B32A32_SINT = 4,
	DXGI_FORMAT_R32G32B32_TYPELESS = 5,
	DXGI_FORMAT_R32G32B32_FLOAT = 6,
	DXGI_FORMAT_R32G32B32_UINT = 7,
	DXGI_FORMAT_R32G32B32_SINT = 8,
	DXGI_FORMAT_R16G16B16A16_TYPELESS = 9,
	DXGI_FORMAT_R16G16B16A16_FLOAT = 10,
	DXGI_FORMAT_R16G16B16A16_UNORM = 11,
	DXGI_FORMAT_R16G16B16A16_UINT = 12,
	DXGI_FORMAT_R16G16B16A16_SNORM = 13,
	DXGI_FORMAT_R16G16B16A16_SINT = 14,
	DXGI_FORMAT_R32G32_TYPELESS = 15,
	DXGI_FORMAT_R32G32_FLOAT = 16,
	DXGI_FORMAT_R32G32_UINT = 17,
	DXGI_FORMAT_R32G32_SINT = 18,
	DXGI_FORMAT_R32G8X24_TYPELESS = 19,
	DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 20,
	DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21,
	DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22,
	DXGI_FORMAT_R10G10B10A2_TYPELESS = 23,
	DXGI_FORMAT_R10G10B10A2_UNORM = 24,
	DXGI_FORMAT_R10G10B10A2_UINT = 25,
	DXGI_FORMAT_R11G11B10_FLOAT = 26,
	DXGI_FORMAT_R8G8B8A8_TYPELESS = 27,
	DXGI_FORMAT_R8G8B8A8_UNORM = 28,
	DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29,
	DXGI_FORMAT_R8G8B8A8_UINT = 30,
	DXGI_FORMAT_R8G8B8A8_SNORM = 31,
	DXGI_FORMAT_R8G8B8A8_SINT = 32,
	DXGI_FORMAT_R16G16_TYPELESS = 33,
	DXGI_FORMAT_R16G16_FLOAT = 34,
	DXGI_FORMAT_R16G16_UNORM = 35,
	DXGI_FORMAT_R16G16_UINT = 36,
	DXGI_FORMAT_R16G16_SNORM = 37,
	DXGI_FORMAT_R16G16_SINT = 38,
	DXGI_FORMAT_R32_TYPELESS = 39,
	DXGI_FORMAT_D32_FLOAT = 40,
	DXGI_FORMAT_R32_FLOAT = 41,
	DXGI_FORMAT_R32_UINT = 42,
	DXGI_FORMAT_R32_SINT = 43,
	DXGI_FORMAT_R24G8_TYPELESS = 44,
	DXGI_FORMAT_D24_UNORM_S8_UINT = 45,
	DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 46,
	DXGI_FORMAT_X24_TYPELESS_G8_UINT = 47,
	DXGI_FORMAT_R8G8_TYPELESS = 48,
	DXGI_FORMAT_R8G8_UNORM = 49,
	DXGI_FORMAT_R8G8_UINT = 50,
	DXGI_FORMAT_R8G8_SNORM = 51,
	DXGI_FORMAT_R8G8_SINT = 52,
	DXGI_FORMAT_R16_TYPELESS = 53,
	DXGI_FORMAT_R16_FLOAT = 54,
	DXGI_FORMAT_D16_UNORM = 55,
	DXGI_FORMAT_R16_UNORM = 56,
	DXGI_FORMAT_R16_UINT = 57,
	DXGI_FORMAT_R16_SNORM = 58,
	DXGI_FORMAT_R16_SINT = 59,
	DXGI_FORMAT_R8_TYPELESS = 60,
	DXGI_FORMAT_R8_UNORM = 61,
	DXGI_FORMAT_R8_UINT = 62,
	DXGI_FORMAT_R8_SNORM = 63,
	DXGI_FORMAT_R8_SINT = 64,
	DXGI_FORMAT_A8_UNORM = 65,
	DXGI_FORMAT_R1_UNORM = 66,
	DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 67,
	DXGI_FORMAT_R8G8_B8G8_UNORM = 68,
	DXGI_FORMAT_G8R8_G8B8_UNORM = 69,
	DXGI_FORMAT_BC1_TYPELESS = 70,
	DXGI_FORMAT_BC1_UNORM = 71,
	DXGI_FORMAT_BC1_UNORM_SRGB = 72,
	DXGI_FORMAT_BC2_TYPELESS = 73,
	DXGI_FORMAT_BC2_UNORM = 74,
	DXGI_FORMAT_BC2_UNORM_SRGB = 75,
	DXGI_FORMAT_BC3_TYPELESS = 76,
	DXGI_FORMAT_BC3_UNORM = 77,
	DXGI_FORMAT_BC3_UNORM_SRGB = 78,
	DXGI_FORMAT_BC4_TYPELESS = 79,
	DXGI_FORMAT_BC4_UNORM = 80,
	DXGI_FORMAT_BC4_SNORM = 81,
	DXGI_FORMAT_BC5_TYPELESS = 82,
	DXGI_FORMAT_BC5_UNORM = 83,
	DXGI_FORMAT_BC5_SNORM = 84,
	DXGI_FORMAT_B5G6R5_UNORM = 85,
	DXGI_FORMAT_B5G5R5A1_UNORM = 86,
	DXGI_FORMAT_B8G8R8A8_UNORM = 87,
	DXGI_FORMAT_B8G8R8X8_UNORM = 88,
	DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89,
	DXGI_FORMAT_B8G8R8A8_TYPELESS = 90,
	DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91,
	DXGI_FORMAT_B8G8R8X8_TYPELESS = 92,
	DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93,
	DXGI_FORMAT_BC6H_TYPELESS = 94,
	DXGI_FORMAT_BC6H_UF16 = 95,
	DXGI_FORMAT_BC6H_SF16 = 96,
	DXGI_FORMAT_BC7_TYPELESS = 97,
	DXGI_FORMAT_BC7_UNORM = 98,
	DXGI_FORMAT_BC7_UNORM_SRGB = 99,
	DXGI_FORMAT_AYUV = 100,
	DXGI_FORMAT_Y410 = 101,
	DXGI_FORMAT_Y416 = 102,
	DXGI_FORMAT_NV12 = 103,
	DXGI_FORMAT_P010 = 104,
	DXGI_FORMAT_P016 = 105,
	DXGI_FORMAT_420_OPAQUE = 106,
	DXGI_FORMAT_YUY2 = 107,
	DXGI_FORMAT_Y210 = 108,
	DXGI_FORMAT_Y216 = 109,
	DXGI_FORMAT_NV11 = 110,
	DXGI_FORMAT_AI44 = 111,
	DXGI_FORMAT_IA44 = 112,
	DXGI_FORMAT_P8 = 113,
	DXGI_FORMAT_A8P8 = 114,
	DXGI_FORMAT_B4G4R4A4_UNORM = 115,
	DXGI_FORMAT_FORCE_UINT = 0xffffffffUL
}
DXGI_FORMAT;


typedef struct _DDS_PIXELFORMAT
{
	dds_u32  size;
	dds_u32  flags;
	dds_u32  fourCC;
	dds_u32  RGBBitCount;
	dds_u32  RBitMask;
	dds_u32  GBitMask;
	dds_u32  BBitMask;
	dds_u32  ABitMask;
}
DDS_PIXELFORMAT;

#define DDS_MAGIC "DDS "
typedef struct _DDS_HEADER
{
	char            magic[4];
	dds_u32         size;
	dds_u32         flags;
	dds_u32         height;
	dds_u32         width;
	dds_u32         pitchOrLinearSize;
	dds_u32         depth; // only if DDS_HEADER_FLAGS_VOLUME is set in flags
	dds_u32         mipMapCount;
	dds_u32         reserved1[11];
	DDS_PIXELFORMAT ddspf;
	dds_u32         caps;
	dds_u32         caps2;
	dds_u32         caps3;
	dds_u32         caps4;
	dds_u32         reserved2;
}
DDS_HEADER;

typedef struct _DDS_HEADER_DXT10
{
	DXGI_FORMAT dxgiFormat;
	dds_u32     resourceDimension;
	dds_u32     miscFlag; // see D3D11_RESOURCE_MISC_FLAG
	dds_u32     arraySize;
	dds_u32     reserved;
}
DDS_HEADER_DXT10;



typedef struct _dds_image_info
{
	dds_u32 size;
	dds_u32 width;
	dds_u32 height;
	dds_u32 depth;
	dds_u32 pitch; /* or linear size */
	dds_u32 format;
}
dds_image_info;

typedef struct _dds_info
{
	/* reading state */
	void* data;
	int side, mip;
	size_t hdrsize;

	/* image info */
	dds_image_info image;
	dds_u32 mipcount;
	dds_u32 flags;
	size_t srcsize;
	dds_u32 sideoffsets[6];
	dds_u32 mipoffsets[16];
}
dds_info;

static DXGI_FORMAT GetDXGIFormat(DDS_PIXELFORMAT ddpf);

DDSRESULT dds_load_from_memory(dds_byte* bytes, size_t size, dds_info* out, const dds_u32* supfmt);
DDSRESULT dds_load_from_file(const char* file, dds_info* out, const dds_u32* supfmt);

DDSRESULT dds_seek(dds_info* info, int side, int mip);
void dds_getinfo(dds_info* info, dds_image_info* outplaneinfo);
DDSBOOL dds_read(dds_info* info, void* out);
dds_byte* dds_read_all(dds_info* info);
bool dds_write(dds_info* info, dds_byte* data, size_t size, std::filesystem::path path);
void dds_close(dds_info* info);